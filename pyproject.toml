[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "metaflow-mcp"
dynamic = ["version"]
description = "mcp weather server"
readme = "README.md"
requires-python = ">=3.12,<3.13"
authors = [{ name = "Bryan Galvin", email = "bcgalvin@gmail.com" }]
classifiers = [
  "Topic :: Internet",
  "Topic :: Software Development",
  "Intended Audience :: Developers",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "httpx>=0.23.0",
  "pydantic>=2.9",
  "pydantic-settings>=2.6.1",
  "python-dotenv>=1.0.1",
  "loguru>=0.7.2",
  "rich>=13.0.0",
  "typer>=0.13.0",
  "aiohttp>=3.8.5",
  "mcp>=1.0.0",
  "outerbounds>=0.3.120",
]

[project.urls]
Documentation = "https://github.com/bcgalvin/metaflow-mcp/blob/main/README.md"
Issues = "https://github.com/bcgalvin/metaflow-mcp/issues"
Source = "https://github.com/bcgalvin/metaflow-mcp"

[project.scripts]
metaflow-mcp = "metaflow_mcp.cli:run"

[project.optional-dependencies]
lint = [
  "pip>=24.2",
  "black>=24.3.0",
  "ruff>=0.7.3",
  "mypy>=1.13.0",
  "pylint>=3",
  "flake8>=6.1.0",
]
tests = [
  "pytest>=8.1.1",
  "pytest-cov>=4.1.0",
  "pytest-asyncio>=0.20.3",
  "pytest-mock>=3.12.0",
]
dev = ["metaflow-mcp[lint,tests]"]

[tool.hatch.version]
path = "src/metaflow_mcp/__init__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.env]
requires = ["uv>=0.1.0"]

[tool.hatch.envs.default]
type = "virtual"
installer = "uv"
features = ["dev"]

[tool.hatch.envs.lint]
type = "virtual"
installer = "uv"
features = ["lint"]

[tool.hatch.envs.lint.scripts]
check_simple = [
  "mypy --install-types --non-interactive --soft-error-limit=3 {args:src/metaflow_mcp}",
]
check_pylint = ["pylint {args:src/metaflow_mcp}"]
check = ["ruff check {args:src/metaflow_mcp}", "mypy {args:src/metaflow_mcp}"]
format = [
  "ruff format {args:src/metaflow_mcp}",
  "isort {args:src/metaflow_mcp}",
]

[tool.hatch.envs.tests]
type = "virtual"
installer = "uv"
features = ["tests"]

[tool.hatch.envs.tests.scripts]
run = "pytest -x --cov=metaflow_mcp --cov-report=xml tests/ --durations 0 -s -vvv"

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "S101",
  "ANN002",
  "ARG001",
  "ANN003",
  "ANN201",
  "ANN204",
  "ANN204",
  "ANN401",
  "TRY003",
  "EM102",
  "S311",
  "EM101",
  "A001",    # shadowing is fine
  "COM",     # Formatter takes care of our commas
  "D",       # We prefer our own docstring style.
  "E501",    # leave line-length enforcement to formatter
  "FBT",     # we have one function that takes one bool; c'mon!
  "FIX",     # Yes, we want XXX as a marker.
  "INP001",  # sometimes we want Python files outside of packages
  "ISC001",  # conflicts with formatter
  "PLR0913", # yes, many arguments, but most have defaults
  "PLR2004", # numbers are sometimes fine
  "SLF001",  # private members are accessed by friendly functions
  "TD",      # we don't follow other people's todo style
]

[tool.lint.extend-select]
extend-select = [
  "PLC", # pylint warnings
  "PLE", # pylint errors
  "PLR", # pylint refactor warnings
  "PLW", # pylint warnings
  "TRY", # tryceratops (better exception handling)
]

[tool.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "ANN001", "ANN201"]

[tool.lint.isort]
known-first-party = ["metaflow_mcp"]

[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.12"

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_missing_imports = true
disallow_untyped_defs = false
check_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
